name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      neo4j:
        image: neo4j:5.25.0
        env:
          NEO4J_AUTH: neo4j/test-password
        ports:
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test-password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests
        env:
          NEO4J_URI: bolt://localhost:7687
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: test-password
        run: |
          pytest tests/ -v --cov=src/backend --cov-report=xml --cov-report=term
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Tests
  test-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/web
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Build
        run: npm run build

  # Build Docker Images
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:latest
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:latest
            ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Production (example - customize for your setup)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy notification
        run: |
          echo "Deployment to production would happen here"
          echo "Image tags: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}"
          echo "            ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}"
      
      # Example deployment steps (customize for your infrastructure):
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl set image deployment/geo-backend backend=ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
      #     kubectl set image deployment/geo-frontend frontend=ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
      
      # - name: Deploy to Docker Swarm
      #   run: |
      #     docker stack deploy -c docker-compose.prod.yml geo-stack
      
      # - name: Deploy to Cloud Run (GCP)
      #   uses: google-github-actions/deploy-cloudrun@v2
      #   with:
      #     service: geo-backend
      #     image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
